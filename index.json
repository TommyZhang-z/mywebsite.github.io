[{"content":"","date":"September 17, 2022","permalink":"/mywebsite.github.io/blogs/","section":"Blogs","summary":"","title":"Blogs"},{"content":" SECTION 1: INTRODUCTORY PROBLEMS # Exercise 1 # Solving with brute force cost \\(O(n^2)\\) time.\nWhich is not what I want\u0026hellip;\n\\(S[1] = A[1] + A[2] + \u0026hellip; + A[n] \\Rightarrow O(n)\\)\n\\(S[2] = A[2] + A[3] + \u0026hellip; + A[n+1] \\Rightarrow O(n)\\)\n\\(S[n] = A[n] + A[n+1] + \u0026hellip; + A[2n-1] \\Rightarrow O(n)\\)\nUsing the value from the preivious iteration would simplify the time complexity.\n\\(S[1] = A[1] + A[2] + \u0026hellip; + A[n] \\Rightarrow O(n)\\)\n\\(S[2] = S[1] - A[1] + A[n+1] \\Rightarrow O(1)\\)\n\\(S[n] = S[n-1] - A[n-1] + A[2n-1] \\Rightarrow O(1)\\)\nExercise 2 # (a) # Create an array of size n with all zero, lets call it count. Iterate through A, let c be the current element if count[c] equals 0 then set count[c] to 1 else c is the duplicate! (b) # let k be the duplicate number\n\\(\\sum_{i=1}^{n}A[i] - \\sum_{i=1}^{n-1}A[i] = k\\)\nExercise 3 # (a) # To only determines if a number exist which can be written as a sum of two distinct numbers from A in two different ways, I can create an array which stores all possible sum from each distinc numbers.\nAfter that, I will run mergesort to the new array so that the duplicate numbers are next to each other, then it would be easy to find duplicate. If there are duplicates, that means there exists a number that satisfy the condition.\nCreate an Array named S Iterate for i: 1 to n: Iterate for j: i to n: insert A[i] + A[j] to S, where i != to j Mergesort S Iterate S: if any of S[i] = S[i+1], then it exists nested for loop = \\(O(n^2)\\)\nmergesort S = \\(O(n^2 \\log_2 n^2)\\) = \\(O(2 * n^2 \\log_2 n)\\) = \\(O(n^2 log_2 n)\\)\niterate S = \\(O(n^2)\\)\nnested for loop + mergesort S + iterate S\n= \\(O(n^2) + O(n^2 log_2 n) + O(n^2)\\)\n= \\(O(n^2 log_2 n)\\)\n(b) # By using a hash table instead of an array, I would know if duplicate exists before inserting to the hash table. (Note that on average hashtable lookups and insertion only takes O(1), so I can claim that the two operations has \\(O(1)\\) expected time).\nCreate an HashTable named S Iterate for i: 1 to n: Iterate for j: i to n: if A[i] + A[j] in S, it exists! insert A[i] + A[j] to S, where i != to j nested for loop = \\(O(n^2)\\)\ninsert to hash table = \\(O(1)\\)\nlookups for hash table = \\(O(1)\\)\ninsert and lookups are inside of the nested for loop, which makes the overall time complexity still being \\(O(n^2)\\)\nExercise 4 # (a) # vote text A-\u0026gt;B A B B-\u0026gt;C C B C-\u0026gt;A C A D-\u0026gt;A D A From the example table, I can observe that a person\u0026rsquo;s vote equals to the frequency of its name - 1.\n\\(F(x) = \\text{frequncy of person x}\\)\n\\(V(x) = \\text{number of votes for person x}\\)\n\\(V(x) = F(x) - 1\\)\n(b) # Using the solution from part (a), I can claim that the person with 0 votes has its name appearing once.\nLet P be any person with 0 votes, the other name on the paper with P\u0026rsquo;s name on it must be the person that P voted for.\n(c) # let n be the number of students\nlet v be the number of total votes\nI can state that n = v since every student must and only vote once.\nGiven the condition that every student received at least one vote, v = v - n, but since n = v, v - n would equals to zero. Therefore, there are no votes left for any one.\nIn conclusion, from the given condition the maximum possible number of votes received by any sutdent is 1.\n(d) # SECTION 2: SEARCHING ALGORITHMS # Exercise 8 # Start from the top right or the bottom left corner of the matrix.\nLooking at the grid, it follows a pattern where things on the left is always smaller than the current block, and the bottom is always greater than the current block.\nTherefore, to find a number in the matrix, all we have to do is either go down or go left depends on if x is greater than the current block or less than the current block, then we would find if M contains x eventually. (In worst case: when it reaches the bottom left)\nlet i = 0, j = n, so we can start from the top right. let y be the current value of M(i, j) when x equals to y, then the number is found when x less than y, then we move to the next left column, in other words, j = j - 1 when x is greater than y, then we move to the next row \u003e below, which means, i = i + 1 if i is greater than n or j is less than 0, then that represents the number was not in the matrix. repeat the operations above until it finds the number or the index get out of bounds. The time complexity is O(n) since the worst case starting from top right is at the bottom left, which cost 2n.\nSECTION 3: SORTING ALGORITHMS # SECTION 4: TIME COMPLEXITY ANALYSIS # ","date":"September 17, 2022","permalink":"/mywebsite.github.io/blogs/comp3121-problem-set-1/","section":"Blogs","summary":"SECTION 1: INTRODUCTORY PROBLEMS # Exercise 1 # Solving with brute force cost \\(O(n^2)\\) time.\nWhich is not what I want\u0026hellip;\n\\(S[1] = A[1] + A[2] + \u0026hellip; + A[n] \\Rightarrow O(n)\\)","title":"COMP3121 Problem Set 1"},{"content":"\rThis is a demo site built using HUGO and Blowfish . It also contains a complete set of projects. Blowfish is flexible and is great for both static page-based content (like this page) or a traditional blog with a feed of recent posts.\nThis is a demo page intended for testing only.\r","date":"September 17, 2022","permalink":"/mywebsite.github.io/","section":"Welcome to My Site! ðŸŽ‰","summary":"This is a demo site built using HUGO and Blowfish . It also contains a complete set of projects. Blowfish is flexible and is great for both static page-based content (like this page) or a traditional blog with a feed of recent posts.","title":"Welcome to My Site! ðŸŽ‰"},{"content":"","date":"September 16, 2022","permalink":"/mywebsite.github.io/tags/django/","section":"Tags","summary":"","title":"Django"},{"content":"","date":"September 16, 2022","permalink":"/mywebsite.github.io/tags/nextjs/","section":"Tags","summary":"","title":"NextJs"},{"content":"Introduction # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nInstallation # Django Configuration # Django Rest Framework # Django User Authentication # Dockerize # Django # Postgres # PGAdmin # NextJs # ","date":"September 16, 2022","permalink":"/mywebsite.github.io/projects/omnicalc/","section":"Projects","summary":"Introduction # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.","title":"Omnicalc [Django, Nextjs]"},{"content":"","date":"September 16, 2022","permalink":"/mywebsite.github.io/projects/","section":"Projects","summary":"","title":"Projects"},{"content":"","date":"September 16, 2022","permalink":"/mywebsite.github.io/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"print(\u0026#34;Hello, world!\u0026#34;) list item more list Syntax Description Header Title Paragraph Text One Two Write the Vue-press release Update the website Contact the media ","date":"September 16, 2022","permalink":"/mywebsite.github.io/about/","section":"Welcome to My Site! ðŸŽ‰","summary":"print(\u0026#34;Hello, world!\u0026#34;) list item more list Syntax Description Header Title Paragraph Text One Two Write the Vue-press release Update the website Contact the media ","title":"About"},{"content":"","date":"January 1, 1","permalink":"/mywebsite.github.io/categories/","section":"Categories","summary":"","title":"Categories"}]